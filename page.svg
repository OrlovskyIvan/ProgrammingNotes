<svg fill="none" viewBox="0 0 800 5000" width="800" height="5000" xmlns="http://www.w3.org/2000/svg">
	<foreignObject width="100%" height="100%">
		<div xmlns="http://www.w3.org/1999/xhtml">
			<style>
				* {
					margin: 0;
					padding: 0;
				}
				
				@keyframes rotate {
					0% {
						transform: rotate(3deg);
					}
					100% {
						transform: rotate(-3deg);
					}
				}

				.container {
					box-sizing: border-box;
					font-family:
						system-ui,
						-apple-system,
						'Segoe UI',
						Roboto,
						Helvetica,
						Arial,
						sans-serif,
						'Apple Color Emoji',
						'Segoe UI Emoji';
					margin: 0;
					width: 100%;
					color: #000000;
					background-color: #75a3a3;
					border-radius: 2px;
					padding: 10px 5px 10px 5px;
				}
				
				.block {
					margin-bottom: 10px;
				}
				
				.note {
					border: 2px solid #ffff99;
					background-color: #ffffcc;
					border-radius: 3px;
					padding: 10px 5px;
					color: #000000;
					margin-bottom: 5px;
				}
				
				.notes__container {
					padding: 5px 0;
				}
				
				.note__p {
					font-size: 16px;
					line-height: 18px;
					letter-spacing: auto;
					margin: 0 0 2px 0;
				}
				
				.note__bold {
					font-weight: bold;
				}
				
				.code {
					font-family: Trebuchet MS, Helvetica, sans-serif;
					font-size: 14px;
					line-height: 16px;
					letter-spacing: auto;
					border-radius: 2px;
					background-color: #FFFAF0;
					padding: 5px;
					margin-bottom: 2px;
				}
				.code__p {
					display: block;
				}
					
				.code__space {
					display: inline-block;
					width: 20px;
				}
				
				.code__space-x2 {
					width: 40px;
				}
				
				.code__space-x3 {
					width: 60px;
				}
				
				.code__empty-line {
					display: block;
					width: 1px;
					height: 16px;
				}
								
				.h1-container {
					display: inline-block;
					border: 2px solid #ccffcc;
					border-radius: 3px;
					background-color: #e6ffe6;
					padding: 15px;
					margin: 0 0 10px 0;
				}

				h1 {
					display: inline-block;
					font-size: 30px;
					font-weight: bold;
					line-height: 1.3;
					letter-spacing: 5px;
					text-transform: uppercase;
					text-shadow:
						0 1px 0 #efefef,
						0 2px 0 #efefef,
						0 3px 0 #efefef,
						0 4px 0 #efefef,
						0 12px 5px rgba(0, 0, 0, 0.1);
					animation: rotate ease-in-out 1s infinite alternate;
					margin: 0;
				}

				h2 {
					font-size: 20px;
					font-weight: bold;
					line-height: 22px;
					letter-spacing: 1px;
					margin: 0 0 10px 0;
				}
				
				h3 {
					font-size: 18px;
					font-weight: bold;
					line-height: 20px;
					letter-spacing: 1px;
					margin: 0 0 5px 0;
				}
				
				li {
					font-size: 16px;
					line-height: 18px;
					letter-spacing: 1px;
					margin-bottom: 2px;
				}
				
				ul {
					list-style: none;
					margin: 0;
					padding: 0;
				}
			</style>
			
			
			 
			
			<div class="container">
				<div class="h1-container">
					<h1>Programming notes</h1>
				</div>
				<div class="block">
					<h2>Notes</h2>
					<div class="notes__container">
						<h3>Objects</h3>
						<div class="note">
							<p class="note__p">Objects are equal to each other only if it is the same object.</p>
						</div>
						<div class="note">
							<p class="note__p">There is no native method to deep clone an object.</p>
							<p class="note__p">structuredClone(value) isn't supported in nodejs webworkers.</p>
						</div>
						<div class="note">
							<p class="note__p">You shouldn't use cycle <span class="note__bold">for in</span> for arrays because it is optimised for <span class="note__bold">objects</span>.</p>
							<p class="note__p">You can use cycle <span class="note__bold">for of</span> for iterable objects when you don't need the number of an item.</p>
							<p class="note__p">Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Naming of variables</h3>
						<div class="note">
							<p class="note__p"><span class="note__bold">Getters and setters</span> are used to <span class="note__bold">control properties</span> of an object.</p>
							<p class="note__p">You can use getters and setters as wrappers around an ordinary property of an object.</p>
							<p class="note__p">In this case you can use a property defined like <span class="note__bold">"_property" to store the main data and use "property" to define setter and getter</span>.</p>
							<p class="note__p">In JavaScript there is a widely known convention that <span class="note__bold">properties starting with an underscore "_" are internal and should not be touched from outside</span> the object.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">let user = {</span>
								  <span class="code__p"><span class="code__space"></span>get name() {</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>return this._name;</span>
								  <span class="code__p"><span class="code__space"></span>},</span>
								  <span class="code__empty-line"></span>
								  <span class="code__p"><span class="code__space"></span>set name(value) {</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>if (value.length меньше 4) {</span>
								      <span class="code__p"><span class="code__space code__space-x3"></span>alert("Name is too short, need at least 4 characters");</span>
								      <span class="code__p"><span class="code__space code__space-x3"></span>return;</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>}</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>this._name = value;</span>
								  <span class="code__p"><span class="code__space"></span>}</span>
								<span class="code__p">};</span>
								<span class="code__empty-line"></span>
								<span class="code__p">user.name = "Pete";</span>
								<span class="code__p">alert(user.name); // Pete</span>
								<span class="code__empty-line"></span>
								<span class="code__p">user.name = ""; // Name is too short...</span>
							</div>
						</div>
						<div class="note">
							<p class="note__p">There are <span class="note__bold">private properties of a class that start with "#"</span>. They are <span class="note__bold">accessible only from inside</span> the class.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">class CoffeeMachine {</span>
								<span class="code__p"><span class="code__space"></span>#waterLimit = 200;</span>
								<span class="code__empty-line"></span>
								<span class="code__p"><span class="code__space"></span>#fixWaterAmount(value) {</span>
								<span class="code__p"><span class="code__space code__space-x2"></span>if (value меньше 0) return 0;</span>
								<span class="code__p"><span class="code__space code__space-x2"></span>if (value больше this.#waterLimit) return this.#waterLimit;</span>
								<span class="code__p"><span class="code__space"></span>}</span>
								<span class="code__empty-line"></span>
								<span class="code__p"><span class="code__space"></span>setWaterAmount(value) {</span>
								<span class="code__p"><span class="code__space code__space-x2"></span>this.#waterLimit = this.#fixWaterAmount(value);</span>
								<span class="code__p"><span class="code__space"></span>}</span>
								<span class="code__empty-line"></span>
								<span class="code__p">}</span>
								<span class="code__empty-line"></span>
								<span class="code__p">let coffeeMachine = new CoffeeMachine();</span>
								<span class="code__empty-line"></span>
								<span class="code__p">// can't access privates from outside of the class</span>
								<span class="code__p">coffeeMachine.#fixWaterAmount(123); // Error</span>
								<span class="code__p">coffeeMachine.#waterLimit = 1000; // Error</span>
							</div>
						</div>
						<div class="note">
							<p class="note__p">A <span class="note__bold">class</span> start with a <span class="note__bold">capital</span> letter.</p>
						</div>
						<div class="note">
							<p class="note__p">It is common practice that <span class="note__bold">event handlers of a HTML elements</span> start with <span class="note__bold">on*</span> and consist <span class="note__bold">only lower letters</span>. But they can be named in various ways: Onclick, ONCLICK/</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">onclick="alert('Клик!')"</span>
							</div>
							<p class="note__p">Event handlers of a DOM element start <span class="note__bold">only with on*</span> and consist <span class="note__bold">only lower letters</span>.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">elem.onclick = function() { // перезапишет существующий обработчик</span>
								<span class="code__p"><span class="code__space"></span>alert('Клик!'); // выведется только это</span>
							  	<span class="code__p">};</span>
							</div>
							<p class="note__p">In the addEventListener events are named as they are called in JavaScript.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">elem.addEventListener( "click" , () => alert('Клик!')</span>
							</div>
							<p class="note__p">In the <span class="note__bold">React</span> naming of events on components is wrote like <span class="note__bold">onClick</span>.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">onClick={handleClick}</span>
							</div>
							<p class="note__p"><span class="note__bold">Event handlers</span> are named like <span class="note__bold">handle*</span>.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">onClick={handleClick}</span>
							</div>
						</div>
					</div>
					<div class="notes__container">
						<h3>JavaScript</h3>
						<div class="note">
							<p class="note__p">Methods <span class="note__bold">getElementsBy* return live collections</span>. That means if you select elements and add a new element in code it will also be added in the collection.</p>
						</div>
						<div class="note">
							<p class="note__p"><span class="note__bold">User attributes</span> of html elements should be prefixed with <span class="note__bold">"data-*"</span>. Then they will be accessible through the property <span class="note__bold">dataset</span>.</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>React</h3>
						<div class="note">
							<p class="note__p">There are <span class="note__bold">two renders</span> in react 18.2- because of Strict Mod. Such problem <span class="note__bold">only exists in developing mode</span>.</p>
						</div>
						<div class="note">
							<p class="note__p">In React state is associated with the position of a component in the tree.</p>
							<p class="note__p">If you have a component like this:</p>
							<div class="code">
								<span class="code__p">const Input = ({ name }) => {</span>
								<span class="code__p"><span class="code__space"></span>const [text, setText] = useState('');</span>
								<span class="code__empty-line"></span>	
								<span class="code__p">const handleOnChange = (e) => setText(e.target.value);</span>
								<span class="code__empty-line"></span>										
								<span class="code__p"><span class="code__space"></span>return открывающиеСкобкиinput name={name} value={text} onChange={handleOnChange} /закрывающиеСкобки</span>
								<span class="code__p">}</span>
							</div>
							<p class="note__p">And it was replaced with toggling by the same component, React will save the state because the place of the components wasn't empty and it thinks that the components are the same.</p>
							<p class="note__p">Example:</p>
							<div class="code">
							<span class="code__p">{isVisible ? ТэгInput name='fristInput' /Тэг : ТэгInput name='secondInput' /Тэг}</span>
							</div>
							<p class="note__p">But if a component is removed then state will be erased:</p>
							<div class="code">
								<span class="code__p">ТэгInput name='fristInput' /Тэг</span>
								<span class="code__p">{isVisible ? ТэгInput name='secondInput' /Тэг : null}</span>
							</div>
							<p class="note__p">This is not the same position (? Don't know why, maybe because of a text node):</p>
							<div class="code">
								<span class="code__p">{isVisible И ТэгInput /Тэг}</span>
								<span class="code__p">{!isVisible И ТэгInput /Тэг}</span>
							</div>
							<p class="note__p">So after toggling the state of each component will be erased even if you give them keys.</p>
							<p class="note__p">And if you give to the two components on the same place keys their states will be erased after toggling:</p>
							<div class="code">
								<span class="code__p">{isVisible ? ТэгInput key="fristInput" name='fristInput' /Тэг : ТэгInput key="secondInput" name='secondInput' /Тэг}</span>
							</div>							
						</div>
					</div>
					<div class="notes__container">
						<h3>React Router 6.4</h3>
						<div class="note">
							<p class="note__p">You can assign an action and a loader to each route.</p>
							<p class="note__p">You can have many Forms on a route, and if they don't have reassigned action props to another route they all will call that action that assigned to the route.</p>
						</div>
						<div class="note">
							<p class="note__p">Component Form is a browser and data mutator.</p>
							<p class="note__p">The prop action in a Form by default equals to a route, where it was rendered.</p>
							<p class="note__p">A Form has the prop method that by default equals to GET, but it can be set to POST, PUT, PATCH, or DELETE.</p>
							<p class="note__p">If you submit a Form with GET, it won't call any action, but if the Form has POST submitting will call the action.</p>
							<p class="note__p">If you change the action prop to a custom route, it will work like Link and redirect you to the new route.</p>
							<p class="note__p">This is the logic of calling actions and redirecting using Form:</p>
							<p class="note__p">Example 1:</p>
							<div class="code">
							<span class="code__p">route:</span>
							<span class="code__p">{</span>
						        <span class="code__p"><span class="code__space"></span>path: "contacts/:contactId",</span>
						        <span class="code__p"><span class="code__space"></span>element: Contact /,</span>
						        <span class="code__p"><span class="code__space"></span>loader: contactLoader,</span>
						        <span class="code__p"><span class="code__space"></span>action: contactAction,</span>
						    <span class="code__p">},</span>
						    <span class="code__empty-line"></span>	
						    <span class="code__p">form:</span>
						    <span class="code__p">Form method="post"</span>
						    	<span class="code__p"><span class="code__space"></span>Button type="submit" /</span>
						    <span class="code__p">/Form</span>
						    <span class="code__empty-line"></span>	
						    <span class="code__p">what will happen:</span>
						    <span class="code__p">A redirect won't happen because prop action is equal to the route "contacts/:contactId" by default.</span>
						    <span class="code__p">It will call the action contactAction that is assigned to the route, because it has method="post".</span>
							</div>
							<p class="note__p">Example 2:</p>
							<div class="code">
							<span class="code__p">route:</span>
							<span class="code__p">{</span>
						        <span class="code__p"><span class="code__space"></span>path: "contacts/:contactId",</span>
						        <span class="code__p"><span class="code__space"></span>element: Contact /,</span>
						        <span class="code__p"><span class="code__space"></span>loader: contactLoader,</span>
						        <span class="code__p"><span class="code__space"></span>action: contactAction,</span>
						    <span class="code__p">},</span>
						    <span class="code__p">{</span>
						        <span class="code__p"><span class="code__space"></span>path: "contacts/:contactId/destroy",</span>
						        <span class="code__p"><span class="code__space"></span>action: deleteAction,</span>
						    <span class="code__p">},</span>
						    <span class="code__empty-line"></span>
						    <span class="code__p">form:</span>
						    <span class="code__p">Form</span>
					            <span class="code__p"><span class="code__space"></span>method="post"</span>
					            <span class="code__p"><span class="code__space"></span>action="destroy"</span>
					            <span class="code__p"><span class="code__space"></span>Button type="submit" /</span>
					        <span class="code__p">/Form</span>
						    <span class="code__empty-line"></span>
						    <span class="code__p">what will happen:</span>
						    <span class="code__p">A redirect will happen, because there is the prop action with a subroute "destroy".</span>
						    <span class="code__p">It will call the action because it has method="post".</span>
						    <span class="code__p">It will call the action deleteAction that is assigned to the another route "contacts/:contactId/destroy" because the redirection will happen in the beginning.</span>
							</div>
							<p class="note__p">Example 3:</p>
							<div class="code">
							<span class="code__p">route:</span>
							<span class="code__p">{</span>
						        <span class="code__p"><span class="code__space"></span>path: "contacts/:contactId",</span>
						        <span class="code__p"><span class="code__space"></span>element: Contact /,</span>
						        <span class="code__p"><span class="code__space"></span>loader: contactLoader,</span>
						        <span class="code__p"><span class="code__space"></span>action: contactAction,</span>
						    <span class="code__p">},</span>
						    <span class="code__p">{</span>
						        <span class="code__p"><span class="code__space"></span>path: "contacts/:contactId/edit",</span>
						        <span class="code__p"><span class="code__space"></span>element: EditContact /,</span>
						        <span class="code__p"><span class="code__space"></span>loader: contactLoader,</span>
						        <span class="code__p"><span class="code__space"></span>action: editAction,</span>
						    <span class="code__p">},</span>
						    <span class="code__empty-line"></span>
						    <span class="code__p">form:</span>
						    <span class="code__p">Form action="edit"</span>
					            <span class="code__p"><span class="code__space"></span>Button type="submit" /</span>
					        <span class="code__p">/Form</span>
						    <span class="code__empty-line"></span>
						    <span class="code__p">what will happen:</span>
						    <span class="code__p">A redirect will happen, because there is the prop action with a subroute "edit".</span>
						    <span class="code__p">It won't call any action because the Form has method GET.</span>
							</div>
						</div>
						<div class="note">
							<p class="note__p">Hooks useNavigation, useFetcher have an inner state.</p>
							<p class="note__p">When you submitting a Form it will trigger the action on the route, and the action triggers the rerender and the revalidation of mutated data, so rendered components with useLoaderData and useNavigation will be rerendered because of the new data. Even if their data wasn't mutated.</p>
							<p class="note__p">When you submitting a Form you trigger the inner state of the useNavigation hook. In this case in the object of useNavigation will be the formData of the submitted Form.</p>
							<p class="note__p">Submitting a Form -> triggers useNavigation -> formData in the object of useNavigation.</p>
							<p class="note__p">Submitting a fetcher.Form -> triggers useNavigation -> there is no formData in the object of useNavigation.</p>
							<p class="note__p">useFetcher also has an inner state.</p>
							<p class="note__p">When you submit a fetcher.Form this state changes happens:</p>
							<p class="note__p">Click -></p>
							<p class="note__p">The first render: navigation idle -> fetcher submitting - formData -></p>
							<p class="note__p">The second render: navigation idle -> fetcher loading - formData -></p>
							<p class="note__p">The third render: navigation idle -> fetcher idle - no formData</p>
							<p class="note__p">When you submit a Form this state changes happens:</p>
							<p class="note__p">Click -></p>
							<p class="note__p">The first render: navigation submitting - formData -></p>
							<p class="note__p">The second render: navigation loading - formData -></p>
							<p class="note__p">The third render: navigation idle - no formData</p>
							<p class="note__p">This can be used to control different behaviors such as Optimistic UI. https://reactrouter.com/en/main/hooks/use-navigation</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>HTML</h3>
						<div class="note">
							<p class="note__p">When you change language on the webpage you need to change attribute lang to "ru" on the html tag.</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Optimization of images</h3>
						<div class="note">
							<p class="note__p">JPEG isn't a file format.</p>
							<p class="note__p">It is a standardized specification for lossy compression for digital images.</p>
							<p class="note__p">Talking about JPEG format we are actually talking about JFIF (JPEG File Interchange Format).</p>
							<p class="note__p">Talking about JPEG format we are actually talking about JFIF (JPEG File Interchange Format). This is the wrapper that holds the compressed data created by the JPEG compression.</p>
							<p class="note__p">There are also EXIF format that is used by photographers.</p>
							<p class="note__p">Both formats use the JPEG extension.</p>
						</div>
						<div class="note">
							<p class="note__p">Baseline JPEG - loads line by line.</p>
							<p class="note__p">Progressive JPEG - loads from bad resolution to good.</p>
						</div>
						<div class="note">
							<p class="note__p">Sharp is a good node.js module for optimization of images.</p>
							<p class="note__p">It uses:</p>
							<p class="note__p">Its own ui and foreign libraries for optimization.</p>
							<p class="note__p">Libraries are:</p>
							<p class="note__p">mozjpeg - for JPEG</p>
							<p class="note__p">pngquant - for PNG</p>
							<p class="note__p">libjpeg -> libjpeg-turbo (+ jpgcrush) -> mozjpeg</p>
							<p class="note__p">mozjpeg includes the most used technics:</p>
							<p class="note__p">
							progressive JPEG encoding - includes all below technics but the technics vary by types and methods. mozjpeg uses the method to optimally split the spectrum of DCT coefficients into separate scans and the tool jpgcrush that is python wrapper around jpegtran.
							</p>
							<p class="note__p">Discrete Cosine Transform (DCT) - uses cosine transform to convert 8x8 blocks of Y, Cb, Cr channels from a spatial domain representation to a frequency domain representation.</p>
							<p class="note__p">trellis quantization - (quality setting, usually 0-100) The quantization process aims to reduce the overall size of the DCT coefficients so that they can be more efficiently compressed in the final Entropy Coding stage. To calculate the quantized DCT coefficients, you must divide the DCT coefficients by the quantization matrix and then round to the nearest whole number.</p>
							<p class="note__p">After quantization jpegtran is applied to arrange the order in which the coefficients are processed during run-length coding matters.</p>
							<p class="note__p">Huffman Coding - Run-length encoding is a form of lossless compression in which data sequences are stored as a single data value and count rather than in their original form.</p>
							<p class="note__p">Links about jpeg compression technics:</p>
							<p class="note__p">https://www.thewebmaster.com/jpeg-definitive-guide/</p>
							<p class="note__p">https://www.thewebmaster.com/progressive-jpegs/</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Performance</h3>
						<div class="note">
							<p class="note__p">Today's intepretators do a lot of optimisations. They can influence on the results of tests compared to ordinary use. If you want to understand does performance work you need to read about work of intepretators.</p>
							<p class="note__p">Source: https://learn.javascript.ru/date</p>
							<p class="note__p">Good article about V8: https://mrale.ph/</p>
						</div>
						<div class="note">
							<p class="note__p">Map and Set has better performance in some cases.</p>
							<p class="note__p">When to use Map and Set: https://www.youtube.com/watch?v=hubQQ3F337A.</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Compatibility</h3>
						<div class="note">
							<p class="note__p">In the <span class="note__bold">Strict mode</span> if there is no the global variable that is assigned in a function then code will show an error.</p>
						</div>
					</div>
				</div>
				<div class="block">
					<h2>To read</h2>
					<ul>
						<li>Garbage collection</li>
						<li>Memory management</li>
						<li>How to use symbols in prectice</li>
						<li>key in object</li>
					</ul>
				</div>
				<div class="block">
					<h2>To do</h2>
					<ul>
						<li>Memory card about naming of variables</li>
						<li>local storage</li>
						<li>Numbers error because of storage in binary memory</li>
						<li>addEventListener passive, touch-action: none.</li>
					</ul>
				</div>
			</div>
		</div>
	</foreignObject>
</svg>