<svg fill="none" viewBox="0 0 800 2000" width="800" height="2000" xmlns="http://www.w3.org/2000/svg">
	<foreignObject width="100%" height="100%">
		<div xmlns="http://www.w3.org/1999/xhtml">
			<style>
				@keyframes rotate {
					0% {
						transform: rotate(3deg);
					}
					100% {
						transform: rotate(-3deg);
					}
				}

				.container {
					box-sizing: border-box;
					font-family:
						system-ui,
						-apple-system,
						'Segoe UI',
						Roboto,
						Helvetica,
						Arial,
						sans-serif,
						'Apple Color Emoji',
						'Segoe UI Emoji';
					margin: 0;
					width: 100%;
					color: #000000;
					background-color: #75a3a3;
					border-radius: 2px;
					padding: 10px 5px 10px 5px;
				}
				
				.block {
					margin-bottom: 10px;
				}
				
				.note {
					border: 2px solid #ffff99;
					background-color: #ffffcc;
					border-radius: 3px;
					padding: 10px 5px;
					color: #000000;
					margin-bottom: 5px;
				}
				
				.notes__container {
					padding: 5px 0;
				}
				
				.note__p {
					font-size: 16px;
					line-height: 18px;
					letter-spacing: auto;
					margin: 0 0 2px 0;
				}
				
				.note__bold {
					font-weight: bold;
				}
				
				.code {
					font-family: Trebuchet MS, Helvetica, sans-serif;
					font-size: 14px;
					line-height: 16px;
					letter-spacing: auto;
					border-radius: 2px;
					background-color: #FFFAF0;
					padding: 5px;
					margin: 0;
				}
				.code__p {
					display: block;
				}
					
				.code__space {
					display: inline-block;
					width: 20px;
				}
				
				.code__space-x2 {
					width: 40px;
				}
				
				.code__space-x3 {
					width: 60px;
				}
				
				.code__empty-line {
					display: block;
					width: 1px;
					height: 16px;
				}
								
				.h1-container {
					display: inline-block;
					border: 2px solid #ccffcc;
					border-radius: 3px;
					background-color: #e6ffe6;
					padding: 15px;
					margin: 0 0 10px 0;
				}

				h1 {
					display: inline-block;
					font-size: 30px;
					font-weight: bold;
					line-height: 1.3;
					letter-spacing: 5px;
					text-transform: uppercase;
					text-shadow:
						0 1px 0 #efefef,
						0 2px 0 #efefef,
						0 3px 0 #efefef,
						0 4px 0 #efefef,
						0 12px 5px rgba(0, 0, 0, 0.1);
					animation: rotate ease-in-out 1s infinite alternate;
					margin: 0;
				}

				h2 {
					font-size: 20px;
					font-weight: bold;
					line-height: 22px;
					letter-spacing: 1px;
					margin: 0 0 10px 0;
				}
				
				h3 {
					font-size: 18px;
					font-weight: bold;
					line-height: 20px;
					letter-spacing: 1px;
					margin: 0 0 5px 0;
				}
				
				li {
					font-size: 16px;
					line-height: 18px;
					letter-spacing: 1px;
					margin-bottom: 2px;
				}
				
				ul {
					list-style: none;
					margin: 0;
					padding: 0;
				}
			</style>
			
			
			 
			
			<div class="container">
				<div class="h1-container">
					<h1>Programming notes</h1>
				</div>
				<div class="block">
					<h2>Notes</h2>
					<div class="notes__container">
						<h3>Objects</h3>
						<div class="note">
							<p class="note__p">Objects are equal to each other only if it is the same object.</p>
						</div>
						<div class="note">
							<p class="note__p">There is no native method to deep clone an object.</p>
							<p class="note__p">structuredClone(value) isn't supported in nodejs webworkers.</p>
						</div>
						<div class="note">
							<p class="note__p">You shouldn't use cycle <span class="note__bold">for in</span> for arrays because it is optimised for <span class="note__bold">objects</span>.</p>
							<p class="note__p">You can use cycle <span class="note__bold">for of</span> for iterable objects when you don't need the number of an item.</p>
							<p class="note__p">Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Naming of variables</h3>
						<div class="note">
							<p class="note__p"><span class="note__bold">Getters and setters</span> are used to <span class="note__bold">control properties</span> of an object.</p>
							<p class="note__p">You can use getters and setters as wrappers around an ordinary property of an object.</p>
							<p class="note__p">In this case you can use a property defined like <span class="note__bold">"_property" to store the main data and use "property" to define setter and getter</span>.</p>
							<p class="note__p">In JavaScript there is a widely known convention that <span class="note__bold">properties starting with an underscore "_" are internal and should not be touched from outside</span> the object.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">let user = {</span>
								  <span class="code__p"><span class="code__space"></span>get name() {</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>return this._name;</span>
								  <span class="code__p"><span class="code__space"></span>},</span>
								  <span class="code__empty-line"></span>
								  <span class="code__p"><span class="code__space"></span>set name(value) {</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>if (value.length меньше 4) {</span>
								      <span class="code__p"><span class="code__space code__space-x3"></span>alert("Name is too short, need at least 4 characters");</span>
								      <span class="code__p"><span class="code__space code__space-x3"></span>return;</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>}</span>
								    <span class="code__p"><span class="code__space code__space-x2"></span>this._name = value;</span>
								  <span class="code__p"><span class="code__space"></span>}</span>
								<span class="code__p">};</span>
								<span class="code__empty-line"></span>
								<span class="code__p">user.name = "Pete";</span>
								<span class="code__p">alert(user.name); // Pete</span>
								<span class="code__empty-line"></span>
								<span class="code__p">user.name = ""; // Name is too short...</span>
							</div>
						</div>
						<div class="note">
							<p class="note__p">There are <span class="note__bold">private properties of a class that start with "#"</span>. They are <span class="note__bold">accessible only from inside</span> the class.</p>
							<p class="note__p">Example:</p>
							<div class="code">
								<span class="code__p">class CoffeeMachine {</span>
								<span class="code__p"><span class="code__space"></span>#waterLimit = 200;</span>
								<span class="code__empty-line"></span>
								<span class="code__p"><span class="code__space"></span>#fixWaterAmount(value) {</span>
								<span class="code__p"><span class="code__space code__space-x2"></span>if (value меньше 0) return 0;</span>
								<span class="code__p"><span class="code__space code__space-x2"></span>if (value больше this.#waterLimit) return this.#waterLimit;</span>
								<span class="code__p"><span class="code__space"></span>}</span>
								<span class="code__empty-line"></span>
								<span class="code__p"><span class="code__space"></span>setWaterAmount(value) {</span>
								<span class="code__p"><span class="code__space code__space-x2"></span>this.#waterLimit = this.#fixWaterAmount(value);</span>
								<span class="code__p"><span class="code__space"></span>}</span>
								<span class="code__empty-line"></span>
								<span class="code__p">}</span>
								<span class="code__empty-line"></span>
								<span class="code__p">let coffeeMachine = new CoffeeMachine();</span>
								<span class="code__empty-line"></span>
								<span class="code__p">// can't access privates from outside of the class</span>
								<span class="code__p">coffeeMachine.#fixWaterAmount(123); // Error</span>
								<span class="code__p">coffeeMachine.#waterLimit = 1000; // Error</span>
							</div>
						</div>
						<div class="note">
							<p class="note__p">A <span class="note__bold">class</span> start with a <span class="note__bold">capital</span> letter.</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>JavaScript</h3>
						<div class="note">
							<p class="note__p">Methods <span class="note__bold">getElementsBy* return live collections</span>. That means if you select elements and add a new element in code it will also be added in the collection.</p>
						</div>
						<div class="note">
							<p class="note__p"><span class="note__bold">User attributes</span> of html elements should be prefixed with <span class="note__bold">"data-*"</span>. Then they will be accessible through the property <span class="note__bold">dataset</span>.</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Performance</h3>
						<div class="note">
							<p class="note__p">Today's intepretators do a lot of optimisations. They can influence on the results of tests compared to ordinary use. If you want to understand does performance work you need to read about work of intepretators.</p>
							<p class="note__p">Source: https://learn.javascript.ru/date</p>
							<p class="note__p">Good article about V8: https://mrale.ph/</p>
						</div>
					</div>
					<div class="notes__container">
						<h3>Compatibility</h3>
						<div class="note">
							<p class="note__p">In the <span class="note__bold">Strict mode</span> if there is no the global variable that is assigned in a function then code will show an error.</p>
						</div>
					</div>
				</div>
				<div class="block">
					<h2>To read</h2>
					<ul>
						<li>Garbage collection</li>
						<li>Memory management</li>
						<li>How to use symbols in prectice</li>
						<li>key in object</li>
					</ul>
				</div>
				<div class="block">
					<h2>To do</h2>
					<ul>
						<li>Memory card about naming of variables</li>
						<li>local storage</li>
						<li>Numbers error because of storage in binary memory</li>
					</ul>
				</div>
			</div>
		</div>
	</foreignObject>
</svg>